name: CI

on: 
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *' # This line schedules the workflow to run at 00:00 on the first day of every month

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
            # - os: ubuntu-latest
            #   compiler: gcc
            #   arch: x64
            #   triplet: x64-linux
            # - os: ubuntu-latest
            #   compiler: clang
            #   arch: x64
            #   triplet: x64-linux
            # - os: windows-latest
            #   compiler: msvc
            #   arch: x64
            #   triplet: x64-windows
            # - os: macos-latest
            #   compiler: clang
            #   arch: x64
            #   triplet: x64-osx
            - os: macos-latest
              compiler: clang
              arch: arm64
              triplet: arm64-osx

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.BUILD_TYPE }}-${{ matrix.arch }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
          restore-keys: |
            ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ matrix.arch }}-

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: false

      - name: Install compiler for Macos
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install llvm
          brew install ninja

      - name: Install Rosetta (for x64 compatibility)
        if: runner.os == 'macOS' && matrix.arch == 'arm64'
        run: |
            softwareupdate --install-rosetta --agree-to-license || true

      - name: Prepare the PATH
        run: |
            if [[ "${{ runner.os }}" == "Windows" ]]; then
                echo "$env:USERPROFILE\vcpkg" >> $GITHUB_PATH
                echo "$env:USERPROFILE\ninja" >> $GITHUB_PATH
            else
                echo "$HOME/vcpkg" >> $GITHUB_PATH
                echo "$HOME/ninja" >> $GITHUB_PATH
            fi
        shell: bash

      - name: Install dependencies
        run: |
          vcpkg install --triplet ${{ matrix.triplet }}
        continue-on-error: true

      - name: Upload vcpkg log on failure
        if: failure() && steps.install_dependencies.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
            name: boost-system-install-log-${{ matrix.os }}-${{ matrix.arch }}
            path: /Users/runner/vcpkg/buildtrees/boost-system/install-${{ matrix.arch }}-dbg-out.log
            retention-days: 3

      - name: Build project
        shell: bash
        env:
          VCPKG_TARGET_TRIPLET: ${{ matrix.triplet }}
        run: |
          echo "VCPKG_TARGET_TRIPLET: ${VCPKG_TARGET_TRIPLET}"
          echo "PATH: ${PATH}"
          ls -la ~/ninja
          if [ -d build ]; then
            echo "Build dir exists"
            ls -la build
          else
            mkdir build
             #rm -rf build/*
          fi
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -G "Ninja" \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
          cmake --build .
          popd
        continue-on-error: true

      - name: Dump vcpkg log on failure
        run: |
            echo "---------------------------------"
            cat /Users/runner/vcpkg/buildtrees/boost-system/install-arm64-osx-dbg-out.log
            echo "---------------------------------"
            cat /Users/runner/work/shinysocks/shinysocks/build/vcpkg-manifest-install.log
            echo "---------------------------------"

      - name: Install curl
        run: |
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              choco install curl
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              brew install curl
            else
              sudo apt-get install -y curl
            fi
        shell: bash

      - name: Test shinysocks
        run: |
          # Start shinysocks in the background
          ./build/bin/shinysocks -c "" -l debug &
          # Save its PID
          SHINYSOCKS_PID=$!
          # Give shinysocks some time to start
          sleep 5
          # Run curl command to verify that shinysocks works
          curl -L --socks5-hostname socks5://localhost:1080 https://raw.githubusercontent.com/jgaa/shinysocks/master/ci/test.txt
          # Check the exit code of the curl command
          if [ $? -ne 0 ]; then
            # If the curl command failed, fail the workflow
            echo "Curl command failed"
            exit 1
          fi
          # Kill the shinysocks program
          kill $SHINYSOCKS_PID
        shell: bash

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cp build/bin/* artifacts/
          cp shinysocks.conf artifacts/

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shinysocks-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.arch }}
          path: artifacts/*
          retention-days: 1

