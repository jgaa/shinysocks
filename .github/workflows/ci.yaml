name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
#         os:
#           - windows-latest
# #          - ubuntu-latest
# #          - macos-latest
#         compiler: [gcc, clang, msvc]
          # - gcc
          # - llvm
          # - clang
          # - msvc
          # you can specify the version after `-` like `llvm-13.0.0`.
        # include:
          # - os: "windows-latest"
          #   compiler: "msvc"
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: windows-latest
            compiler: msvc
          - os: macos-latest
            compiler: clang

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
          restore-keys: |
            ${{ runner.os }}-${{ env.BUILD_TYPE }}-

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: false

      - name: Prepare the PATH
        run: |
            if [[ "${{ runner.os }}" == "Windows" ]]; then
                echo "$env:USERPROFILE\vcpkg" >> $GITHUB_PATH
                echo "$env:USERPROFILE\ninja" >> $GITHUB_PATH
            else
                echo "$HOME/vcpkg" >> $GITHUB_PATH
                echo "$HOME/ninja" >> $GITHUB_PATH
            fi
        shell: bash

      - name: Install dependencies
        run: |
          vcpkg install

      - name: Build project
        shell: bash
        run: |
          pwd
          set
          echo "-------------------------------------------"
          if [ -d build ]; then
            echo "Build dir exists"
            ls -la build
          else
            mkdir build
             #rm -rf build/*
          fi
          pushd build
          cmake .. -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build .
          popd

