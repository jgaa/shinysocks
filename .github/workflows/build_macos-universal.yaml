name: Build Universal macOS Binary with vcpkg

on:
  push:
    branches:
      - automation
  pull_request:

jobs:
  build-universal-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Dependencies
        run: |
          # Install essential tools (native)
          brew update
          brew install cmake ninja llvm

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV

      - name: Install Boost for x86_64
        run: |
          CXXFLAGS="-arch x86_64" $VCPKG_ROOT/vcpkg install boost-exception boost-program-options boost-property-tree boost-asio boost-system boost-thread --triplet=x64-osx

      - name: Install Boost for arm64
        run: |
          CXXFLAGS="-arch arm64" $VCPKG_ROOT/vcpkg install boost-exception boost-program-options boost-property-tree boost-asio boost-system boost-thread --triplet=arm64-osx

      - name: Merge Boost Libraries into a Universal Binary
        run: |
          mkdir -p build/boost-universal
          for lib in $(ls $VCPKG_ROOT/installed/x64-osx/lib/libboost_*.a); do
            libname=$(basename $lib)
            lipo -create -output build/boost-universal/$libname \
              $VCPKG_ROOT/installed/x64-osx/lib/$libname \
              $VCPKG_ROOT/installed/arm64-osx/lib/$libname
          done

      - name: Configure Build with vcpkg
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -G "Ninja" \
                   -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
                   -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
                   -DBOOST_ROOT=$(pwd)/boost-universal
          cd ..

      - name: Build Project
        run: |
          cd build
          cmake --build .
          cd ..

      - name: Merge App Binaries into a Universal Binary
        run: |
          mkdir -p artifacts
          lipo -create -output artifacts/universal_binary \
            build/bin/shinysocks_arm64 \
            build/bin/shinysocks_x86_64

      - name: Verify Universal Binary
        run: |
          file artifacts/universal_binary

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-build
          path: artifacts/*
          retention-days: 1
